@typeparam TModel where TModel : class

<div class="modal fade @(_isVisible ? "show" : "")" tabindex="-1" style="display: @(_isVisible ? "block" : "none")">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@Title</h5>
                <button type="button" class="btn-close" @onclick="HandleCancel"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="@Model" OnValidSubmit="HandleSave">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    @ChildContent

                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="HandleCancel">Cancel</button>
                        <button type="submit" class="btn btn-primary">@SaveButtonText</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@if (_isVisible)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    private bool _isVisible;

    [Parameter]
    public string Title { get; set; } = "Form";

    [Parameter]
    public string SaveButtonText { get; set; } = "Save";

    [Parameter]
    public TModel Model { get; set; } = default!;

    [Parameter]
    public RenderFragment ChildContent { get; set; } = default!;

    [Parameter]
    public EventCallback<TModel> OnSave { get; set; }

    [Parameter]
    public EventCallback OnCancel { get; set; }

    public void Show()
    {
        _isVisible = true;
        StateHasChanged();
    }

    public void Hide()
    {
        _isVisible = false;
        StateHasChanged();
    }

    private async Task HandleSave()
    {
        await OnSave.InvokeAsync(Model);
        Hide();
    }

    private async Task HandleCancel()
    {
        await OnCancel.InvokeAsync();
        Hide();
    }
}