@page "/warranties"
@attribute [Authorize(Roles = "Admin,Manager")]
@using CarBlazor.Models
@using Microsoft.AspNetCore.Authorization
@using CarBlazor.Components.Search
@using CarBlazor.Services
@inject WarrantyService WarrantyService
@inject NavigationManager Navigation
@inject IJSRuntime JsRuntime
@rendermode InteractiveServer

<PageTitle>Warranties</PageTitle>

<h1>Warranties</h1>

<Search Placeholder="Search warranties..." OnSearch="HandleSearch" />

<p>
    <a href="/warranties/create" class="btn btn-primary">Create New</a>
</p>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}

<table class="table">
    <thead>
        <tr>
            <th>Car</th>
            <th>Type</th>
            <th>Provider</th>
            <th>Start Date</th>
            <th>End Date</th>
            <th>Cost</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @if (Warranties != null && Warranties.Any())
        {
            @foreach (var warranty in Warranties)
            {
                <tr @onclick="() => ViewDetails(warranty.Id)" class="clickable-row">
                    <td>@($"{warranty.Car?.Make} {warranty.Car?.Model} ({warranty.Car?.Year})")</td>
                    <td>@warranty.WarrantyType?.Name</td>
                    <td>@warranty.Provider</td>
                    <td>@warranty.StartDate.ToShortDateString()</td>
                    <td>@warranty.EndDate.ToShortDateString()</td>
                    <td>@warranty.Cost.ToString("C")</td>
                    <td>
                        <button @onclick:stopPropagation="true" @onclick="() => DeleteConfirm(warranty.Id)"
                                class="btn btn-sm btn-link text-danger">
                            <i class="bi bi-trash fs-5"></i>
                        </button>
                    </td>
                </tr>
            }
        }
        else if (IsLoading)
        {
            <tr>
                <td colspan="7">Loading...</td>
            </tr>
        }
        else
        {
            <tr>
                <td colspan="7">No warranties found</td>
            </tr>
        }
    </tbody>
</table>

<style>
    .clickable-row {
        cursor: pointer;
    }

    .clickable-row:hover {
        background-color: #f5f5f5;
    }
</style>

@code {
    private List<Warranty>? AllWarranties { get; set; }
    private List<Warranty>? Warranties { get; set; }
    private bool IsLoading { get; set; } = true;
    private string? ErrorMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            AllWarranties = await WarrantyService.GetWarrantiesAsync();
            Warranties = AllWarranties;
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error loading warranties: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
        }
    }

    private void HandleSearch(string searchTerm)
    {
        try
        {
            Warranties = WarrantyService.SearchWarranties(searchTerm, AllWarranties);
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error searching warranties: {ex.Message}";
        }
    }

    private void ViewDetails(int id)
    {
        Navigation.NavigateTo($"warranties/details/{id}");
    }

    private async Task DeleteConfirm(int id)
    {
        try
        {
            var confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this warranty?");

            if (confirmed)
            {
                var success = await WarrantyService.DeleteWarrantyAsync(id);
                if (success)
                {
                    AllWarranties = await WarrantyService.GetWarrantiesAsync();
                    Warranties = AllWarranties;
                }
                else
                {
                    ErrorMessage = "Failed to delete warranty. It may no longer exist.";
                }
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error deleting warranty: {ex.Message}";
        }
    }
}