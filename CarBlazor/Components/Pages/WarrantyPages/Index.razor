@page "/warranties"
@attribute [Authorize(Roles = "Admin,Manager")]
@using CarBlazor.Components.Constants
@using CarBlazor.Models
@using Microsoft.AspNetCore.Authorization
@using CarBlazor.Components.Search
@using CarBlazor.Services
@using CarBlazor.Components.Datagrid
@inject WarrantyService WarrantyService
@inject NavigationManager Navigation
@inject IJSRuntime JsRuntime
@rendermode InteractiveServer

<PageTitle>Warranties</PageTitle>

<h1>Warranties</h1>

<Search Placeholder="Search warranties..." OnSearch="HandleSearch" />

<p>
    <a href="/warranties/create" class="btn btn-primary">Create New</a>
</p>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}
@if (IsLoading)
{
    <p>Loading...</p>
}
else if (Warranties == null || Warranties.Count == 0)
{
    <p>No warranties found</p>
}
else
{
    <Datagrid TItem="Warranty" Items="Warranties" Columns="_warrantyColumns" OnRowClick="HandleRowClick">
        <RowActions Context="warranty">
            <DeleteButton OnClick="@(() => DeleteConfirm(warranty.Id))" />
        </RowActions>
    </Datagrid>
}

@code {
    private List<Warranty>? Warranties { get; set; }
    private bool IsLoading { get; set; } = true;
    private string? ErrorMessage { get; set; }
    private readonly List<DataGridColumn<Warranty>> _warrantyColumns = DatagridColumnDefinitions.WarrantyColumns;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Warranties = await WarrantyService.GetWarrantiesAsync();
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error loading warranties: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
        }
    }

    private async Task HandleSearch(string searchTerm)
    {
        try
        {
            Warranties = await WarrantyService.SearchWarrantiesAsync(searchTerm);
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error searching warranties: {ex.Message}";
        }
    }

    private void HandleRowClick(Warranty warranty)
    {
        Navigation.NavigateTo($"warranties/details/{warranty.Id}");
    }

    private async Task DeleteConfirm(int id)
    {
        try
        {
            var confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this warranty?");

            if (confirmed)
            {
                var success = await WarrantyService.DeleteWarrantyAsync(id);
                if (success)
                {
                    Warranties = await WarrantyService.GetWarrantiesAsync();
                }
                else
                {
                    ErrorMessage = "Failed to delete warranty. It may no longer exist.";
                }
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error deleting warranty: {ex.Message}";
        }
    }
}