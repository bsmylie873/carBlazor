@page "/warranties"
@attribute [Authorize(Roles = "Admin,Manager")]
@using CarBlazor.Components.Constants
@using Microsoft.AspNetCore.Authorization
@using CarBlazor.Components.Search
@using CarBlazor.Components.Datagrid
@using CarBlazor.Components.FormModal
@using CarBlazor.DAL.Models
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JsRuntime
@rendermode InteractiveServer

<PageTitle>Warranties</PageTitle>

<h1>Warranties</h1>

<Search Placeholder="Search warranties..." OnSearch="HandleSearch"/>

<p>
    <button class="btn btn-primary" @onclick="OpenCreateModal">Create New</button>
</p>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}
@if (IsLoading)
{
    <p>Loading...</p>
}
else if (Warranties == null || Warranties.Count == 0)
{
    <p>No warranties found</p>
}
else
{
    <Datagrid TItem="Warranty" Items="Warranties" Columns="_warrantyColumns" OnRowClick="HandleRowClick">
        <RowActions Context="warranty">
            <DeleteButton OnClick="@(() => DeleteConfirm(warranty.Id))"/>
        </RowActions>
    </Datagrid>
}

<FormModal TModel="Warranty"
           Model="NewWarranty"
           Title="Create Warranty"
           SaveButtonText="Create"
           OnSave="CreateWarranty"
           OnCancel="CloseModal"
           @ref="formModal">
    <div class="form-group mb-3">
        <label for="carId">Car</label>
        <InputSelect id="carId" @bind-Value="NewWarranty.CarId" class="form-control">
            <option value="">-- Select Car --</option>
            @if (Cars != null)
            {
                @foreach (var car in Cars)
                {
                    <option value="@car.Id">@($"{car.Make} {car.Model} ({car.Year})")</option>
                }
            }
        </InputSelect>
        <ValidationMessage For="@(() => NewWarranty.CarId)"/>
    </div>

    <div class="form-group mb-3">
        <label for="warrantyTypeId">Warranty Type</label>
        <InputSelect id="warrantyTypeId" @bind-Value="NewWarranty.WarrantyTypeId" class="form-control">
            @if (WarrantyTypes != null)
            {
                @foreach (var type in WarrantyTypes)
                {
                    <option value="@type.Id">@type.Name</option>
                }
            }
        </InputSelect>
        <ValidationMessage For="@(() => NewWarranty.WarrantyTypeId)"/>
    </div>

    <div class="form-group mb-3">
        <label for="provider">Provider</label>
        <InputText id="provider" @bind-Value="NewWarranty.Provider" class="form-control"/>
        <ValidationMessage For="@(() => NewWarranty.Provider)"/>
    </div>

    <div class="form-group mb-3">
        <label for="startDate">Start Date</label>
        <InputDate id="startDate" @bind-Value="NewWarranty.StartDate" class="form-control"/>
        <ValidationMessage For="@(() => NewWarranty.StartDate)"/>
    </div>

    <div class="form-group mb-3">
        <label for="endDate">End Date</label>
        <InputDate id="endDate" @bind-Value="NewWarranty.EndDate" class="form-control"/>
        <ValidationMessage For="@(() => NewWarranty.EndDate)"/>
    </div>

    <div class="form-group mb-3">
        <label for="coverageType">Coverage Details</label>
        <InputText id="coverageType" @bind-Value="NewWarranty.CoverageDetails" class="form-control"/>
        <ValidationMessage For="@(() => NewWarranty.CoverageDetails)"/>
    </div>

    <div class="form-group mb-3">
        <label for="cost">Cost</label>
        <InputNumber id="cost" @bind-Value="NewWarranty.Cost" class="form-control"/>
        <ValidationMessage For="@(() => NewWarranty.Cost)"/>
    </div>
</FormModal>

@code {
    private List<Warranty>? Warranties { get; set; }
    private List<Car>? Cars { get; set; }

    private Warranty NewWarranty { get; set; } = new()
    {
        StartDate = DateTime.Today,
        EndDate = DateTime.Today.AddYears(3)
    };

    private List<WarrantyType>? WarrantyTypes { get; set; }
    private bool IsLoading { get; set; } = true;
    private string? ErrorMessage { get; set; }
    private readonly List<DataGridColumn<Warranty>> _warrantyColumns = DatagridColumnDefinitions.WarrantyColumns;
    private FormModal<Warranty>? formModal;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Warranties = await Http.GetFromJsonAsync<List<Warranty>>("api/warranties");
            Cars = await Http.GetFromJsonAsync<List<Car>>("api/cars");
            WarrantyTypes = await Http.GetFromJsonAsync<List<WarrantyType>>("api/warranties/types");
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error loading data: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
        }
    }

    private void OpenCreateModal()
    {
        NewWarranty = new Warranty
        {
            StartDate = DateTime.Today,
            EndDate = DateTime.Today.AddYears(3)
        };
        formModal?.Show();
    }

    private void CloseModal()
    {
        formModal?.Hide();
    }

    private async Task CreateWarranty(Warranty warranty)
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/warranties", warranty);

            if (response.IsSuccessStatusCode)
            {
                Warranties = await Http.GetFromJsonAsync<List<Warranty>>("api/warranties");
                CloseModal();
            }
            else
            {
                ErrorMessage = "Failed to create warranty.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error creating warranty: {ex.Message}";
        }
    }

    private async Task HandleSearch(string searchTerm)
    {
        try
        {
            Warranties = await Http.GetFromJsonAsync<List<Warranty>>($"api/warranty/search?term={searchTerm}");
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error searching warranties: {ex.Message}";
        }
    }

    private void HandleRowClick(Warranty warranty)
    {
        Navigation.NavigateTo($"warranties/details/{warranty.Id}");
    }

    private async Task DeleteConfirm(int id)
    {
        try
        {
            var confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this warranty?");

            if (confirmed)
            {
                var response = await Http.DeleteAsync($"api/warranties/{id}");

                if (response.IsSuccessStatusCode)
                {
                    Warranties = await Http.GetFromJsonAsync<List<Warranty>>("api/warranties");
                    ErrorMessage = null;
                }
                else
                {
                    ErrorMessage = "Failed to delete warranty. It may no longer exist.";
                }
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error deleting warranty: {ex.Message}";
        }
    }

}