@page "/warranties/details/{Id:int}"
@attribute [Authorize(Roles = "Admin,Manager")]
@using CarBlazor.Models
@using Microsoft.AspNetCore.Authorization
@using CarBlazor.Services
@inject WarrantyService WarrantyService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Warranty Details</PageTitle>

<h1>Details</h1>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}

<div>
    <h4>Warranty</h4>
    <hr />
    @if (Warranty != null)
    {
        <dl class="row">
            <dt class="col-sm-2">Car</dt>
            <dd class="col-sm-10">
                <a href="@($"cars/details/{Warranty.CarId}")">@($"{Warranty.Car?.Make} {Warranty.Car?.Model} ({Warranty.Car?.Year})")</a>
            </dd>

            <dt class="col-sm-2">Warranty Type</dt>
            <dd class="col-sm-10">@Warranty.WarrantyType?.Name</dd>

            <dt class="col-sm-2">Provider</dt>
            <dd class="col-sm-10">@Warranty.Provider</dd>

            <dt class="col-sm-2">Start Date</dt>
            <dd class="col-sm-10">@Warranty.StartDate.ToShortDateString()</dd>

            <dt class="col-sm-2">End Date</dt>
            <dd class="col-sm-10">@Warranty.EndDate.ToShortDateString()</dd>

            <dt class="col-sm-2">Coverage Details</dt>
            <dd class="col-sm-10">@Warranty.CoverageDetails</dd>

            <dt class="col-sm-2">Cost</dt>
            <dd class="col-sm-10">@Warranty.Cost.ToString("C")</dd>
        </dl>

        <div>
            <a class="btn btn-primary" href="@($"warranties/edit/{Warranty.Id}")">Edit</a> |
            <button type="button" class="btn btn-secondary" @onclick="GoBack">Back to List</button>
        </div>
    }
    else if (IsLoading)
    {
        <p>Loading...</p>
    }
    else
    {
        <p>Warranty not found. <button type="button" class="btn btn-secondary" @onclick="GoBack">Back to List</button></p>
    }
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private Warranty? Warranty { get; set; }
    private bool IsLoading { get; set; } = true;
    private string? ErrorMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Warranty = await WarrantyService.GetWarrantyByIdAsync(Id);
            
            if (Warranty == null)
            {
                ErrorMessage = $"Warranty with ID {Id} not found.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error loading warranty details: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo("warranties");
    }
}