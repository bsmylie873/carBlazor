@page "/admin/users"
@attribute [Authorize(Roles = "Admin")]
@using CarBlazor.Models
@using Microsoft.AspNetCore.Authorization
@using CarBlazor.Components.Search
@using CarBlazor.Services
@inject UserService UserService
@inject NavigationManager Navigation
@inject IJSRuntime JsRuntime
@rendermode InteractiveServer

<PageTitle>Users</PageTitle>

<h1>Users</h1>

<Search Placeholder="Search users..." OnSearch="HandleSearch" />

<p>
    <a href="/admin/users/create" class="btn btn-primary">Create New</a>
</p>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}

<table class="table">
    <thead>
        <tr>
            <th>Username</th>
            <th>Role</th>
            <th>Created At</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @if (Users == null)
        {
            <tr>
                <td colspan="4">
                    <div class="d-flex justify-content-center">
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                </td>
            </tr>
        }
        else if (!Users.Any())
        {
            <tr>
                <td colspan="4">No users found.</td>
            </tr>
        }
        else
        {
            @foreach (var user in Users)
            {
                <tr @onclick="() => ViewDetails(user.Id)" class="clickable-row">
                    <td>@user.Username</td>
                    <td>@user.Role.Name</td>
                    <td>@user.CreatedAt.ToLocalTime().ToString("g")</td>
                    <td>
                        <button @onclick:stopPropagation="true" @onclick="() => DeleteConfirm(user.Id)"
                                class="btn btn-sm btn-link text-danger">
                            <i class="bi bi-trash fs-5"></i>
                        </button>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

<style>
    .clickable-row {
        cursor: pointer;
    }

    .clickable-row:hover {
        background-color: #f5f5f5;
    }
</style>

@code {
    private List<User>? Users { get; set; }
    private string? ErrorMessage { get; set; }
    private string CurrentSearchTerm = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers(string searchTerm = "")
    {
        try
        {
            if (string.IsNullOrWhiteSpace(searchTerm))
            {
                Users = await UserService.GetUsersAsync();
            }
            else
            {
                Users = await UserService.SearchUsersAsync(searchTerm);
            }
            CurrentSearchTerm = searchTerm;
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error loading users: {ex.Message}";
        }
    }

    private async Task HandleSearch(string searchTerm)
    {
        await LoadUsers(searchTerm);
    }

    private void ViewDetails(int id)
    {
        Navigation.NavigateTo($"admin/users/{id}");
    }

    private async Task DeleteConfirm(int id)
    {
        try
        {
            var confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this user?");

            if (confirmed)
            {
                var success = await UserService.DeleteUserAsync(id);

                if (success)
                {
                    await LoadUsers(CurrentSearchTerm);
                }
                else
                {
                    ErrorMessage = "Failed to delete user. User not found.";
                }
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error deleting user: {ex.Message}";
        }
    }
}