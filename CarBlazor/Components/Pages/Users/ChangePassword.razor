@page "/change-password/{UserId:int}"
@using CarBlazor.Api.ViewModels
@using Microsoft.AspNetCore.Authorization
@using CarBlazor.Services.Services
@inject HttpClient Http
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.WebUtilities
@attribute [Authorize]
@rendermode InteractiveServer

<PageTitle>Change Password - Car Dealership Management</PageTitle>

<div class="row justify-content-center">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h3>@(_isForceReset ? "Password Reset Required" : "Change Password")</h3>
            </div>
            <div class="card-body">
                @if (_isForceReset)
                {
                    <div class="alert alert-warning">
                        Your password has been reset by an administrator. You must set a new password to continue.
                    </div>
                }

                @if (!string.IsNullOrEmpty(_errorMessage))
                {
                    <div class="alert alert-danger">@_errorMessage</div>
                }

                @if (!string.IsNullOrEmpty(_successMessage))
                {
                    <div class="alert alert-success">@_successMessage</div>
                }

                <EditForm Model="@_model" OnValidSubmit="HandleSubmit">
                    <DataAnnotationsValidator />

                    @if (!_isForceReset)
                    {
                        <div class="mb-3">
                            <label for="currentPassword" class="form-label">Current Password</label>
                            <InputText type="password" class="form-control" id="currentPassword" @bind-Value="_model.CurrentPassword" />
                            <ValidationMessage For="@(() => _model.CurrentPassword)" />
                        </div>
                    }

                    <div class="mb-3">
                        <label for="newPassword" class="form-label">New Password</label>
                        <InputText type="password" class="form-control" id="newPassword" @bind-Value="_model.NewPassword" />
                        <ValidationMessage For="@(() => _model.NewPassword)" />
                    </div>

                    <div class="mb-3">
                        <label for="confirmPassword" class="form-label">Confirm New Password</label>
                        <InputText type="password" class="form-control" id="confirmPassword" @bind-Value="_model.ConfirmPassword" />
                        <ValidationMessage For="@(() => _model.ConfirmPassword)" />
                    </div>

                    <button type="submit" class="btn btn-primary w-100">Change Password</button>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public int UserId { get; set; }
    
    private bool _isForceReset;
    private string? _errorMessage;
    private string? _successMessage;
    
    private ChangePasswordModel _model = new();
    
    protected override void OnInitialized()
    {
        var uri = new Uri(NavigationManager.Uri);
        _isForceReset = QueryHelpers.ParseQuery(uri.Query).TryGetValue("reset", out var _);
    }
    
    private async Task HandleSubmit()
    {
        try
        {
            var response = await Http.PostAsJsonAsync($"admin/api/account/{UserId}/change-password", _model);
        
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<PasswordChangeResult>();
            
                if (result?.Success == true)
                {
                    _successMessage = result.Message ?? "Password changed successfully. Redirecting...";
                    _errorMessage = null;

                    await Task.Delay(1500);
                    NavigationManager.NavigateTo("/");
                }
                else
                {
                    _errorMessage = result?.Message ?? "Failed to change password";
                    _successMessage = null;
                }
            }
            else
            {
                var result = await response.Content.ReadFromJsonAsync<PasswordChangeResult>();
                _errorMessage = result?.Message ?? "Failed to change password";
                _successMessage = null;
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error: {ex.Message}";
        }
    }
    private class PasswordChangeResult
    {
        public bool Success { get; set; }
        public string? Message { get; set; }
    }
}
