@page "/account/profile"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using CarBlazor.Models
@using CarBlazor.Services
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserService UserService
@attribute [Authorize]
@rendermode InteractiveServer

<PageTitle>My Profile - Car Dealership Management</PageTitle>

<div class="container">
    <h1>My Profile</h1>

    @if (_user == null)
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else
    {
        <div class="card">
            <div class="card-header">
                <h3>@_user.Username</h3>
            </div>
            <div class="card-body">
                <div class="row mb-3">
                    <div class="col-md-3 fw-bold">Username:</div>
                    <div class="col-md-9">@_user.Username</div>
                </div>
                <div class="row mb-3">
                    <div class="col-md-3 fw-bold">Role:</div>
                    <div class="col-md-9">@_user.Role.Name</div>
                </div>
            </div>
            <div class="card-footer">
                <a href="/account/edit-profile" class="btn btn-primary">Edit Profile</a>
                <a href="/account/change-password" class="btn btn-secondary">Change Password</a>
            </div>
        </div>
    }

    @if (!string.IsNullOrEmpty(_errorMessage))
    {
        <div class="alert alert-danger mt-3">@_errorMessage</div>
    }
</div>

@code {
    private User? _user;
    private string? _errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var userIdClaim = authState.User.FindFirst(ClaimTypes.NameIdentifier);

            if (userIdClaim != null && int.TryParse(userIdClaim.Value, out var userId))
            {
                _user = await UserService.GetUserByIdAsync(userId);
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error loading profile: {ex.Message}";
        }
    }

}