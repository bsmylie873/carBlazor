@page "/account/edit-profile"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using CarBlazor.Data
@using CarBlazor.Models
@using System.Security.Claims
@using Microsoft.EntityFrameworkCore
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject CarBlazorContext DbContext
@inject NavigationManager Navigation
@attribute [Authorize]
@rendermode InteractiveServer

<PageTitle>Edit Profile - Car Dealership Management</PageTitle>

<div class="container">
    <h1>Edit Profile</h1>

    @if (_user == null)
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else
    {
        <div class="card">
            <div class="card-header">
                <h3>Update Your Information</h3>
            </div>
            <div class="card-body">
                <EditForm Model="@_model" OnValidSubmit="UpdateProfile" FormName="editProfileForm">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger" />

                    <div class="mb-3">
                        <label for="username" class="form-label">Username</label>
                        <InputText id="username" @bind-Value="_model.Username" class="form-control" />
                        <ValidationMessage For="@(() => _model.Username)" />
                    </div>

                    <div class="d-flex gap-2">
                        <button type="submit" class="btn btn-primary">Save Changes</button>
                        <a href="/account/profile" class="btn btn-secondary">Cancel</a>
                    </div>
                </EditForm>

                @if (!string.IsNullOrEmpty(_errorMessage))
                {
                    <div class="alert alert-danger mt-3">@_errorMessage</div>
                }
                @if (!string.IsNullOrEmpty(_successMessage))
                {
                    <div class="alert alert-success mt-3">@_successMessage</div>
                }
            </div>
        </div>
    }
</div>

@code {
    private User? _user;
    private EditProfileModel _model = new();
    private string? _errorMessage;
    private string? _successMessage;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userIdClaim = authState.User.FindFirst(ClaimTypes.NameIdentifier);

        if (userIdClaim != null && int.TryParse(userIdClaim.Value, out var userId))
        {
            _user = await DbContext.Users
                .Include(u => u.Role)
                .FirstOrDefaultAsync(u => u.Id == userId);

            if (_user != null)
            {
                _model.Username = _user.Username;
            }
        }
    }

    private async Task UpdateProfile()
    {
        if (_user == null) return;

        try
        {
            var existingUser = await DbContext.Users
                .FirstOrDefaultAsync(u => u.Username == _model.Username && u.Id != _user.Id);

            if (existingUser != null)
            {
                _errorMessage = "Username is already taken.";
                return;
            }

            _user.Username = _model.Username;
            
            DbContext.Users.Update(_user);
            await DbContext.SaveChangesAsync();

            _successMessage = "Profile updated successfully.";
            _errorMessage = null;
            
            StateHasChanged();
            await Task.Delay(1500);
            Navigation.NavigateTo("/account/profile");
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error updating profile: {ex.Message}";
            _successMessage = null;
        }
    }

    public class EditProfileModel
    {
        [Required(ErrorMessage = "Username is required")]
        [StringLength(50, MinimumLength = 3, ErrorMessage = "Username must be between 3 and 50 characters")]
        public string Username { get; set; } = string.Empty;
    }
}