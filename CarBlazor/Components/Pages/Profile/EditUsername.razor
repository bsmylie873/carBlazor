@page "/account/edit-profile"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using CarBlazor.DAL.Models
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient Http
@inject NavigationManager Navigation
@attribute [Authorize]
@rendermode InteractiveServer

<PageTitle>Edit Profile - Car Dealership Management</PageTitle>

<div class="container">
    <h1>Edit Profile</h1>

    @if (_user == null)
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else
    {
        <div class="card">
            <div class="card-header">
                <h3>Update Your Information</h3>
            </div>
            <div class="card-body">
                <EditForm Model="@_username" OnValidSubmit="UpdateProfile" FormName="editProfileForm">
                    <DataAnnotationsValidator/>
                    <ValidationSummary class="text-danger"/>

                    <div class="mb-3">
                        <label for="username" class="form-label">Username</label>
                        <InputText id="username" @bind-Value="_username" class="form-control"/>
                        <ValidationMessage For="@(() => _username)"/>
                    </div>

                    <div class="d-flex gap-2">
                        <button type="submit" class="btn btn-primary">Save Changes</button>
                        <a href="/account/profile" class="btn btn-secondary">Cancel</a>
                    </div>
                </EditForm>

                @if (!string.IsNullOrEmpty(_errorMessage))
                {
                    <div class="alert alert-danger mt-3">@_errorMessage</div>
                }
                @if (!string.IsNullOrEmpty(_successMessage))
                {
                    <div class="alert alert-success mt-3">@_successMessage</div>
                }
            </div>
        </div>
    }
</div>

@code {
    private User? _user;
    private string _username;
    private string? _errorMessage;
    private string? _successMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var userIdClaim = authState.User.FindFirst(ClaimTypes.NameIdentifier);

            if (userIdClaim != null && int.TryParse(userIdClaim.Value, out var userId))
            {
                _user = await Http.GetFromJsonAsync<User>($"api/users/{userId}");

                if (_user != null)
                {
                    _username = _user.Username;
                }
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error loading user information: {ex.Message}";
        }
    }

    private async Task UpdateProfile()
    {
        if (_user == null) return;

        try
        {
            if (_user.Username != _username)
            {
                // First check if username exists
                var checkResponse = await Http.GetAsync($"api/users/check-username?username={Uri.EscapeDataString(_username)}");
                var usernameExists = await checkResponse.Content.ReadFromJsonAsync<bool>();

                if (usernameExists)
                {
                    _errorMessage = "Username is already taken.";
                    return;
                }

                // Update user with new username
                _user.Username = _username;
                var response = await Http.PutAsJsonAsync($"api/users/{_user.Id}", _user);

                if (response.IsSuccessStatusCode)
                {
                    _successMessage = "Profile updated successfully.";
                    _errorMessage = null;

                    StateHasChanged();
                    await Task.Delay(1500);
                    Navigation.NavigateTo("/account/profile");
                }
                else
                {
                    _errorMessage = "Failed to update profile.";
                }
            }
            else
            {
                _successMessage = "No changes made.";
                await Task.Delay(1500);
                Navigation.NavigateTo("/account/profile");
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error updating profile: {ex.Message}";
            _successMessage = null;
        }
    }
}