@page "/account/change-password"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using CarBlazor.Models
@using System.Security.Claims
@using CarBlazor.Services
@using CarBlazor.ViewModels
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject AuthService AuthService
@inject UserService UserService
@attribute [Authorize]
@rendermode InteractiveServer

<PageTitle>Change Password - Car Dealership Management</PageTitle>

<div class="container">
    <h1>Change Password</h1>

    @if (_user == null)
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else
    {
        <div class="card">
            <div class="card-header">
                <h3>Update Your Password</h3>
            </div>
            <div class="card-body">
                <EditForm Model="@_model" OnValidSubmit="AlterPassword" FormName="changePasswordForm">
                    <DataAnnotationsValidator/>
                    <ValidationSummary class="text-danger"/>

                    <div class="mb-3">
                        <label for="currentPassword" class="form-label">Current Password</label>
                        <InputText type="password" id="currentPassword" @bind-Value="_model.CurrentPassword"
                                   class="form-control"/>
                        <ValidationMessage For="@(() => _model.CurrentPassword)"/>
                    </div>

                    <div class="mb-3">
                        <label for="newPassword" class="form-label">New Password</label>
                        <InputText type="password" id="newPassword" @bind-Value="_model.NewPassword"
                                   class="form-control"/>
                        <ValidationMessage For="@(() => _model.NewPassword)"/>
                    </div>

                    <div class="mb-3">
                        <label for="confirmPassword" class="form-label">Confirm New Password</label>
                        <InputText type="password" id="confirmPassword" @bind-Value="_model.ConfirmPassword"
                                   class="form-control"/>
                        <ValidationMessage For="@(() => _model.ConfirmPassword)"/>
                    </div>

                    <div class="d-flex gap-2">
                        <button type="submit" class="btn btn-primary">Change Password</button>
                        <a href="/account/profile" class="btn btn-secondary">Cancel</a>
                    </div>
                </EditForm>

                @if (!string.IsNullOrEmpty(_errorMessage))
                {
                    <div class="alert alert-danger mt-3">@_errorMessage</div>
                }
                @if (!string.IsNullOrEmpty(_successMessage))
                {
                    <div class="alert alert-success mt-3">@_successMessage</div>
                }
            </div>
        </div>
    }
</div>

@code {
    private User? _user;
    private ChangePasswordModel _model = new();
    private string? _errorMessage;
    private string? _successMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var userIdClaim = authState.User.FindFirst(ClaimTypes.NameIdentifier);

            if (userIdClaim != null && int.TryParse(userIdClaim.Value, out var userId))
            {
                _user = await UserService.GetUserByIdAsync(userId);
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error loading user information: {ex.Message}";
        }
    }

    private async Task AlterPassword()
    {
        if (_user == null) return;

        try
        {
            var result = await AuthService.ChangePasswordAsync(
                _user.Id,
                _model.CurrentPassword,
                _model.NewPassword);

            if (result.Success)
            {
                _successMessage = result.Message;
                _errorMessage = null;
                _model = new ChangePasswordModel();

                StateHasChanged();
                await Task.Delay(1500);
                Navigation.NavigateTo("/account/profile");
            }
            else
            {
                _errorMessage = result.Message;
                _successMessage = null;
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error changing password: {ex.Message}";
        }
    }

}