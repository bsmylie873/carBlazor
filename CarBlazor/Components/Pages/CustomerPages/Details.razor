@page "/customers/details/{Id:int}"
@attribute [Authorize(Roles = "Admin,Manager")]
@using CarBlazor.DAL.Models
@using Microsoft.AspNetCore.Authorization
@using CarBlazor.Services.Services
@using CarBlazor.Components.Datagrid
@using CarBlazor.Components.Constants
@inject CustomerService CustomerService
@inject NavigationManager Navigation
@inject IJSRuntime JsRuntime
@rendermode InteractiveServer

<PageTitle>Customer Details</PageTitle>

<h1>Details</h1>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}

<div>
    <h4>Customer</h4>
    <hr/>
    @if (Customer != null)
    {
        <dl class="row">
            <dt class="col-sm-2">First Name</dt>
            <dd class="col-sm-10">@Customer.FirstName</dd>

            <dt class="col-sm-2">Last Name</dt>
            <dd class="col-sm-10">@Customer.LastName</dd>

            <dt class="col-sm-2">Email</dt>
            <dd class="col-sm-10">@Customer.Email</dd>

            <dt class="col-sm-2">Phone Number</dt>
            <dd class="col-sm-10">@Customer.PhoneNumber</dd>

            <dt class="col-sm-2">Address</dt>
            <dd class="col-sm-10">@Customer.Address</dd>
        </dl>
        
        <div class="mt-3">
            <a class="btn btn-primary" href="@($"customers/edit/{Customer.Id}")">Edit</a>
            <button class="btn btn-secondary" @onclick="GoBack">Back to List</button>
        </div>
        
        <hr/>

        <h4>
            Customer Cars
            @if (CustomerCars != null)
            {
                <span class="badge bg-primary">@CustomerCars.Count</span>
            }
        </h4>

        @if (CustomerCars != null && CustomerCars.Any())
        {
            <Datagrid TItem="CustomerCar" Items="CustomerCars" Columns="_customerCarColumns"
                      OnRowClick="HandleCarRowClick">
                <RowActions Context="customerCar">
                    <DeleteButton OnClick="@(() => DeleteConfirm(customerCar.Id))"/>
                </RowActions>
            </Datagrid>
        }
        else if (IsLoading)
        {
            <p>Loading cars...</p>
        }
        else
        {
            <p>No cars associated with this customer</p>
        }
    }
    else if (IsLoading)
    {
        <p>Loading...</p>
    }
    else
    {
        <p>Customer not found.
            <button class="btn btn-secondary" @onclick="GoBack">Back to List</button>
        </p>
    }
</div>

@code {
    [Parameter] public int Id { get; set; }

    private Customer? Customer { get; set; }
    private List<CustomerCar>? CustomerCars { get; set; }
    private bool IsLoading { get; set; } = true;
    private string? ErrorMessage { get; set; }

    private readonly List<DataGridColumn<CustomerCar>> _customerCarColumns = DatagridColumnDefinitions.CustomerCarColumns;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Customer = await CustomerService.GetCustomerByIdAsync(Id);

            if (Customer == null)
            {
                ErrorMessage = $"Customer with ID {Id} not found.";
                return;
            }

            CustomerCars = await CustomerService.GetCustomerCarsAsync(Id);
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error loading customer details: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo("customers");
    }

    private void HandleCarRowClick(CustomerCar customerCar)
    {
        Navigation.NavigateTo($"cars/details/{customerCar.CarId}");
    }

    private async Task DeleteConfirm(int id)
    {
        try
        {
            var confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to remove this car from the customer?");
            if (confirmed)
            {
                var success = await CustomerService.RemoveCarFromCustomerAsync(id);
                if (success)
                {
                    CustomerCars = await CustomerService.GetCustomerCarsAsync(id);
                    ErrorMessage = null;
                }
                else
                {
                    ErrorMessage = "Failed to remove car from customer. It may no longer exist.";
                }
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error deleting car: {ex.Message}";
        }
    }
}