@page "/customers/edit/{Id:int}"
@attribute [Authorize(Roles = "Admin,Manager")]
@using CarBlazor.DAL.Models
@using Microsoft.AspNetCore.Authorization
@using CarBlazor.Components.Datagrid
@using CarBlazor.Components.Constants
@using CarBlazor.Components.FormModal
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JsRuntime
@rendermode InteractiveServer

<PageTitle>Edit Customer</PageTitle>

<h1>Edit</h1>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}

<h4>Customer</h4>
<hr/>
<div class="row">
    <div class="col-md-4">
        @if (Customer != null)
        {
            <EditForm Model="@Customer" OnValidSubmit="UpdateCustomer">
                <DataAnnotationsValidator/>
                <ValidationSummary/>

                <input type="hidden" @bind-value="Customer.Id"/>

                <div class="form-group mb-3">
                    <label for="first_name">First Name</label>
                    <InputText id="first_name" @bind-Value="Customer.FirstName" class="form-control"/>
                    <ValidationMessage For="@(() => Customer.FirstName)"/>
                </div>

                <div class="form-group mb-3">
                    <label for="last_name">Last Name</label>
                    <InputText id="last_name" @bind-Value="Customer.LastName" class="form-control"/>
                    <ValidationMessage For="@(() => Customer.LastName)"/>
                </div>

                <div class="form-group mb-3">
                    <label for="email">Email</label>
                    <InputText id="email" @bind-Value="Customer.Email" class="form-control"/>
                    <ValidationMessage For="@(() => Customer.Email)"/>
                </div>

                <div class="form-group mb-3">
                    <label for="phone_number">Phone Number</label>
                    <InputText id="phone_number" @bind-Value="Customer.PhoneNumber" class="form-control"/>
                    <ValidationMessage For="@(() => Customer.PhoneNumber)"/>
                </div>

                <div class="form-group mb-3">
                    <label for="address">Address</label>
                    <InputText id="address" @bind-Value="Customer.Address" class="form-control"/>
                    <ValidationMessage For="@(() => Customer.Address)"/>
                </div>

                <div class="form-group mb-3">
                    <button type="submit" class="btn btn-primary">Save</button>
                    <button type="button" class="btn btn-secondary" @onclick="GoBack">Back to List</button>
                </div>
            </EditForm>
        }
        else if (IsLoading)
        {
            <p>Loading...</p>
        }
        else
        {
            <p>Customer not found.
                <button class="btn btn-secondary" @onclick="GoBack">Back to List</button>
            </p>
        }
    </div>
</div>

<div class="row mt-4">
    <div class="col-12">
        <h4>
            Customer Cars
            @if (CustomerCars != null)
            {
                <span class="badge bg-primary">@CustomerCars.Count</span>
            }
        </h4>
        <hr/>

        @if (CustomerCars != null && CustomerCars.Any())
        {
            <Datagrid TItem="CustomerCar" Items="CustomerCars" Columns="_customerCarColumns"
                      OnRowClick="HandleCarRowClick">
                <RowActions Context="customerCar">
                    <DeleteButton OnClick="@(() => RemoveCarFromCustomer(customerCar))"/>
                </RowActions>
            </Datagrid>
        }
        else if (IsLoading)
        {
            <p>Loading cars...</p>
        }
        else
        {
            <p>No cars associated with this customer</p>
        }

        <div class="mb-3">
            <button @onclick="OpenAddCarModal" class="btn btn-success">Add Car</button>
        </div>
    </div>
</div>

<FormModal TModel="CustomerCar"
           Model="NewCustomerCar"
           Title="Add Car to Customer"
           SaveButtonText="Add Car"
           OnSave="AddCarToCustomer"
           OnCancel="CloseModal"
           @ref="formModal">
    <div class="form-group mb-3">
        <label for="car">Select Car</label>
        <InputSelect id="car" @bind-Value="NewCustomerCar.CarId" class="form-control">
            <option value="0">-- Select a Car --</option>
            @if (AvailableCars != null)
            {
                @foreach (var car in AvailableCars)
                {
                    <option value="@car.Id">@car.Make @car.Model (@car.Year)</option>
                }
            }
        </InputSelect>
    </div>

    <div class="form-group mb-3">
        <label for="purchaseDate">Purchase Date</label>
        <InputDate id="purchaseDate" @bind-Value="NewCustomerCar.PurchaseDate" class="form-control"/>
    </div>

    <div class="form-group mb-3">
        <label for="isPrimaryOwner" class="form-check-label">
            <InputCheckbox id="isPrimaryOwner" @bind-Value="NewCustomerCar.IsPrimaryOwner" class="form-check-input"/>
            Primary Owner
        </label>
    </div>
</FormModal>

@code {
    [Parameter] public int Id { get; set; }

    private Customer? Customer { get; set; }
    private List<CustomerCar>? CustomerCars { get; set; }
    private List<Car>? AvailableCars { get; set; }
    private bool IsLoading { get; set; } = true;
    private string? ErrorMessage { get; set; }
    private CustomerCar NewCustomerCar { get; set; } = new();
    private FormModal<CustomerCar>? formModal;

    private readonly List<DataGridColumn<CustomerCar>> _customerCarColumns = DatagridColumnDefinitions.CustomerCarColumns;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Customer = await Http.GetFromJsonAsync<Customer>($"api/customer/{Id}");

            if (Customer == null)
            {
                ErrorMessage = $"Customer with ID {Id} not found.";
                return;
            }

            await LoadCustomerCarsAndAvailableCars();
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error loading customer: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
        }
    }

    private async Task UpdateCustomer()
    {
        try
        {
            if (Customer == null) return;

            var response = await Http.PutAsJsonAsync($"api/customer/{Id}", Customer);

            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo($"customers/details/{Id}");
            }
            else
            {
                ErrorMessage = "Failed to update customer. It may no longer exist.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error updating customer: {ex.Message}";
        }
    }

    private async Task LoadCustomerCarsAndAvailableCars()
    {
        try
        {
            CustomerCars = await Http.GetFromJsonAsync<List<CustomerCar>>($"api/customer/{Id}/cars");
            var allCars = await Http.GetFromJsonAsync<List<Car>>("api/car");
            var customerCarIds = CustomerCars?.Select(cc => cc.CarId).ToHashSet() ?? [];
            AvailableCars = allCars?.Where(car => !customerCarIds.Contains(car.Id)).ToList();
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error loading customer cars: {ex.Message}";
        }
    }

    private void OpenAddCarModal()
    {
        NewCustomerCar = new CustomerCar
        {
            CustomerId = Id,
            PurchaseDate = DateTime.Today,
            IsPrimaryOwner = false
        };
        formModal?.Show();
    }

    private void CloseModal()
    {
        formModal?.Hide();
    }

    private async Task AddCarToCustomer()
    {
        try
        {
            if (NewCustomerCar.CarId == 0) return;

            NewCustomerCar.CustomerId = Id;
            var response = await Http.PostAsJsonAsync($"api/customer/{Id}/cars", NewCustomerCar);

            if (response.IsSuccessStatusCode)
            {
                await LoadCustomerCarsAndAvailableCars();
                CloseModal();
            }
            else
            {
                ErrorMessage = "Failed to add car to customer.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error adding car to customer: {ex.Message}";
        }
    }

    private async Task RemoveCarFromCustomer(CustomerCar customerCar)
    {
        try
        {
            var confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to remove this car from the customer?");
            if (confirmed)
            {
                var response = await Http.DeleteAsync($"api/customer/cars/{customerCar.Id}");

                if (response.IsSuccessStatusCode)
                {
                    await LoadCustomerCarsAndAvailableCars();
                    StateHasChanged();
                }
                else
                {
                    ErrorMessage = "Failed to remove car from customer.";
                    StateHasChanged();
                }
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error removing car from customer: {ex.Message}";
            StateHasChanged();
        }
    }

    private void HandleCarRowClick(CustomerCar customerCar)
    {
        Navigation.NavigateTo($"cars/details/{customerCar.CarId}");
    }

    private void GoBack()
    {
        Navigation.NavigateTo("customers");
    }

}