@page "/customers"
@attribute [Authorize(Roles = "Admin,Manager")]
@using CarBlazor.Components.Constants
@using CarBlazor.Components.Datagrid
@using Microsoft.AspNetCore.Authorization
@using CarBlazor.Components.Search
@using CarBlazor.Components.FormModal
@using CarBlazor.DAL.Models
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JsRuntime
@rendermode InteractiveServer

<PageTitle>Customers</PageTitle>

<h1>Customers</h1>

<Search Placeholder="Search customers..." OnSearch="HandleSearch"/>

<p>
    <button class="btn btn-primary" @onclick="OpenCreateModal">Create New</button>
</p>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}
@if (IsLoading)
{
    <p>Loading...</p>
}
else if (Customers == null || Customers.Count == 0)
{
    <p>No customers found</p>
}
else
{
    <Datagrid TItem="Customer" Items="Customers" Columns="_customerColumns" OnRowClick="HandleRowClick">
        <RowActions Context="customer">
            <DeleteButton OnClick="@(() => DeleteConfirm(customer.Id))"/>
        </RowActions>
    </Datagrid>
}

<FormModal TModel="Customer"
           Model="NewCustomer"
           Title="Create Customer"
           SaveButtonText="Create"
           OnSave="CreateCustomer"
           OnCancel="CloseModal"
           @ref="formModal">
</FormModal>

@code {
    private List<Customer>? Customers { get; set; }
    private Customer NewCustomer { get; set; } = new();
    private bool IsLoading { get; set; } = true;
    private string? ErrorMessage { get; set; }
    private readonly List<DataGridColumn<Customer>> _customerColumns = DatagridColumnDefinitions.CustomerColumns;
    private FormModal<Customer>? formModal;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Customers = await  Http.GetFromJsonAsync<List<Customer>>("api/customers");
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error loading customers: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
        }
    }
    
    private async Task LoadCustomers()
    {
        Customers = await Http.GetFromJsonAsync<List<Customer>>("api/customers");
    }

    private void OpenCreateModal()
    {
        NewCustomer = new Customer();
        formModal?.Show();
    }

    private void CloseModal()
    {
        formModal?.Hide();
    }

    private async Task CreateCustomer(Customer customer)
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/customers", customer);
            response.EnsureSuccessStatusCode();
            await LoadCustomers();
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error creating customer: {ex.Message}";
        }
    }

    private async Task HandleSearch(string searchTerm)
    {
        try
        {
            IsLoading = true;
            Customers = await Http.GetFromJsonAsync<List<Customer>>($"api/customers/search?searchTerm={Uri.EscapeDataString(searchTerm)}");
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error searching customers: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
        }
    }

    private void HandleRowClick(Customer customer)
    {
        Navigation.NavigateTo($"customers/details/{customer.Id}");
    }

    private async Task DeleteConfirm(int id)
    {
        try
        {
            var confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this customer?");

            if (confirmed)
            {
                var response = await Http.DeleteAsync($"api/customers/{id}");
                if (response.IsSuccessStatusCode)
                {
                    await LoadCustomers();
                    ErrorMessage = null;
                }
                else
                {
                    ErrorMessage = "Failed to delete customer. It may no longer exist.";
                }
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error deleting customer: {ex.Message}";
        }
    }

}