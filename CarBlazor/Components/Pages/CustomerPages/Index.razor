@page "/customers"
@attribute [Authorize]
@using CarBlazor.Data
@using CarBlazor.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using CarBlazor.Components.Search
@inject CarBlazorContext Context
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>Customers</PageTitle>

<h1>Customers</h1>

<Search Placeholder="Search customers..." OnSearch="HandleSearch" />

<p>
    <a href="customers/create" class="btn btn-primary">Create New</a>
</p>

<table class="table">
    <thead>
    <tr>
        <th>First Name</th>
        <th>Last Name</th>
        <th>Email</th>
        <th>Phone Number</th>
        <th>Address</th>
        <th>Cars</th>
        <th></th>
    </tr>
    </thead>
    <tbody>
    @if (Customers != null)
    {
        @foreach (var customer in Customers)
        {
            <tr @onclick="() => ViewDetails(customer.Id)" class="clickable-row">
                <td>@customer.FirstName</td>
                <td>@customer.LastName</td>
                <td>@customer.Email</td>
                <td>@customer.PhoneNumber</td>
                <td>@customer.Address</td>
                <td>
                    @if (customer.CustomerCars != null)
                    {
                        <span class="badge bg-primary">@customer.CustomerCars.Count</span>
                    }
                    else
                    {
                        <span class="badge bg-secondary">0</span>
                    }
                </td>
                <td>
                    <button @onclick:stopPropagation="true" @onclick="() => DeleteConfirm(customer.Id)"
                            class="btn btn-sm btn-link text-danger">
                        <i class="bi bi-trash fs-5"></i>
                    </button>
                </td>
            </tr>
        }
    }
    else
    {
        <tr>
            <td colspan="7">Loading...</td>
        </tr>
    }
    </tbody>
</table>

<style>
    .clickable-row {
        cursor: pointer;
    }

    .clickable-row:hover {
        background-color: #f5f5f5;
    }
</style>

@code {
    private List<Customer>? Customers { get; set; }
    private List<Customer>? AllCustomers { get; set; }

    protected override async Task OnInitializedAsync()
    {
        AllCustomers = await Context.Customer
            .Include(c => c.CustomerCars)
            .ToListAsync();
        Customers = await Context.Customer
            .Include(c => c.CustomerCars)
            .ToListAsync();
    }
    
    private void HandleSearch(string searchTerm)
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            Customers = AllCustomers;
            return;
        }

        Customers = AllCustomers?
            .Where(c => 
                c is { FirstName: not null, LastName: not null, Email: not null, PhoneNumber: not null, Address: not null } 
                && (c.FirstName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                    c.LastName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                    c.Email.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                    c.PhoneNumber.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                    c.Address.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)))
            .ToList();
    }
    
    private void ViewDetails(int id)
    {
        Navigation.NavigateTo($"customers/details/{id}");
    }

    private async Task DeleteConfirm(int id)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this customer?");

        if (confirmed)
        {
            var customer = await Context.Customer.FindAsync(id);
            if (customer != null)
            {
                Context.Customer.Remove(customer);
                await Context.SaveChangesAsync();
                Customers = await Context.Customer
                    .Include(c => c.CustomerCars)
                    .ToListAsync();
            }
        }
    }
}