@page "/customers"
@attribute [Authorize(Roles = "Admin,User")]
@using CarBlazor.Models
@using Microsoft.AspNetCore.Authorization
@using CarBlazor.Components.Search
@using CarBlazor.Services
@inject CustomerService CustomerService
@inject NavigationManager Navigation
@inject IJSRuntime JsRuntime
@rendermode InteractiveServer

<PageTitle>Customers</PageTitle>

<h1>Customers</h1>

<Search Placeholder="Search customers..." OnSearch="HandleSearch"/>

<p>
    <a href="/customers/create" class="btn btn-primary">Create New</a>
</p>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}

<table class="table">
    <thead>
    <tr>
        <th>First Name</th>
        <th>Last Name</th>
        <th>Email</th>
        <th>Phone Number</th>
        <th>Address</th>
        <th>Cars</th>
        <th></th>
    </tr>
    </thead>
    <tbody>
    @if (Customers != null && Customers.Any())
    {
        @foreach (var customer in Customers)
        {
            <tr @onclick="() => ViewDetails(customer.Id)" class="clickable-row">
                <td>@customer.FirstName</td>
                <td>@customer.LastName</td>
                <td>@customer.Email</td>
                <td>@customer.PhoneNumber</td>
                <td>@customer.Address</td>
                <td>
                    @if (customer.CustomerCars != null)
                    {
                        <span class="badge bg-primary">@customer.CustomerCars.Count</span>
                    }
                    else
                    {
                        <span class="badge bg-secondary">0</span>
                    }
                </td>
                <td>
                    <button @onclick:stopPropagation="true" @onclick="() => DeleteConfirm(customer.Id)"
                            class="btn btn-sm btn-link text-danger">
                        <i class="bi bi-trash fs-5"></i>
                    </button>
                </td>
            </tr>
        }
    }
    else if (IsLoading)
    {
        <tr>
            <td colspan="7">Loading...</td>
        </tr>
    }
    else
    {
        <tr>
            <td colspan="7">No customers found</td>
        </tr>
    }
    </tbody>
</table>

<style>
    .clickable-row {
        cursor: pointer;
    }

    .clickable-row:hover {
        background-color: #f5f5f5;
    }
</style>

@code {
    private List<Customer>? Customers { get; set; }
    private bool IsLoading { get; set; } = true;
    private string? ErrorMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Customers = await CustomerService.GetCustomersAsync();
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error loading customers: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
        }
    }

    private async Task HandleSearch(string searchTerm)
    {
        try
        {
            IsLoading = true;
            Customers = await CustomerService.SearchCustomersAsync(searchTerm);
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error searching customers: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
        }
    }

    private void ViewDetails(int id)
    {
        Navigation.NavigateTo($"customers/details/{id}");
    }

    private async Task DeleteConfirm(int id)
    {
        try
        {
            var confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this customer?");

            if (confirmed)
            {
                var success = await CustomerService.DeleteCustomerAsync(id);
                if (success)
                {
                    Customers = await CustomerService.GetCustomersAsync();
                }
                else
                {
                    ErrorMessage = "Failed to delete customer. It may no longer exist.";
                }
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error deleting customer: {ex.Message}";

        }
    }
}