@page "/cars/edit/{Id:int}"
@attribute [Authorize(Roles = "Admin,Manager,User")]
@using CarBlazor.DAL.Models
@using Microsoft.AspNetCore.Authorization
@using CarBlazor.Services.Services
@using CarBlazor.Components.Datagrid
@using CarBlazor.Components.Constants
@using CarBlazor.Components.FormModal
@inject CarService CarService
@inject WarrantyService WarrantyService
@inject NavigationManager Navigation
@inject IJSRuntime JsRuntime
@rendermode InteractiveServer

<PageTitle>Edit Car</PageTitle>

<h1>Edit</h1>

<h4>Car</h4>
<hr/>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger" role="alert">
        @ErrorMessage
    </div>
}

<div class="row">
    <div class="col-md-4">
        @if (Car != null)
        {
            <EditForm Model="@Car" OnValidSubmit="UpdateCar">
                <DataAnnotationsValidator/>
                <ValidationSummary/>

                <input type="hidden" @bind-value="Car.Id"/>

                <div class="form-group mb-3">
                    <label for="make">Make</label>
                    <InputText id="make" @bind-Value="Car.Make" class="form-control"/>
                    <ValidationMessage For="@(() => Car.Make)"/>
                </div>

                <div class="form-group mb-3">
                    <label for="model">Model</label>
                    <InputText id="model" @bind-Value="Car.Model" class="form-control"/>
                    <ValidationMessage For="@(() => Car.Model)"/>
                </div>

                <div class="form-group mb-3">
                    <label for="year">Year</label>
                    <InputNumber id="year" @bind-Value="Car.Year" class="form-control"/>
                    <ValidationMessage For="@(() => Car.Year)"/>
                </div>

                <div class="form-group mb-3">
                    <label for="color">Color</label>
                    <InputText id="color" @bind-Value="Car.Color" class="form-control"/>
                    <ValidationMessage For="@(() => Car.Color)"/>
                </div>

                <div class="form-group mb-3">
                    <label for="productionDate">Production Date</label>
                    <InputDate id="productionDate" @bind-Value="Car.ProductionDate" class="form-control"/>
                    <ValidationMessage For="@(() => Car.ProductionDate)"/>
                </div>

                <div class="form-group mb-3">
                    <button type="submit" class="btn btn-primary">Save</button>
                    <button type="button" class="btn btn-secondary" @onclick="GoBack">Back to List</button>
                </div>
            </EditForm>
        }
        else if (IsLoading)
        {
            <p>Loading...</p>
        }
        else
        {
            <p>Car not found.
                <button class="btn btn-secondary" @onclick="GoBack">Back to List</button>
            </p>
        }
    </div>
</div>

<div class="row mt-4">
    <div class="col-12">
        <h4>
            Warranties
            @if (Warranties != null)
            {
                <span class="badge bg-primary">@Warranties.Count</span>
            }
        </h4>
        <hr/>

        @if (Warranties != null && Warranties.Any())
        {
            <Datagrid TItem="Warranty" Items="Warranties" Columns="_warrantyColumns" OnRowClick="HandleRowClick">
                <RowActions Context="warranty">
                    <DeleteButton OnClick="@(() => DeleteConfirm(warranty.Id))"/>
                </RowActions>
            </Datagrid>
        }
        else if (IsLoading)
        {
            <p>Loading warranties...</p>
        }
        else
        {
            <p>No warranties found for this car</p>
        }

        <div class="mb-3">
            <button @onclick="OpenCreateModal" class="btn btn-success">Add Warranty</button>
        </div>
    </div>
</div>

<FormModal TModel="Warranty"
           Model="NewWarranty"
           Title="Add Warranty"
           SaveButtonText="Create"
           OnSave="CreateWarranty"
           OnCancel="CloseModal"
           @ref="formModal">
    <div class="form-group mb-3">
        <label for="warrantyTypeId">Warranty Type</label>
        <InputSelect id="warrantyTypeId" @bind-Value="NewWarranty.WarrantyTypeId" class="form-control">
            @if (WarrantyTypes != null)
            {
                @foreach (var type in WarrantyTypes)
                {
                    <option value="@type.Id">@type.Name</option>
                }
            }
        </InputSelect>
        <ValidationMessage For="@(() => NewWarranty.WarrantyTypeId)" />
    </div>

    <div class="form-group mb-3">
        <label for="provider">Provider</label>
        <InputText id="provider" @bind-Value="NewWarranty.Provider" class="form-control" />
        <ValidationMessage For="@(() => NewWarranty.Provider)" />
    </div>

    <div class="form-group mb-3">
        <label for="startDate">Start Date</label>
        <InputDate id="startDate" @bind-Value="NewWarranty.StartDate" class="form-control" />
        <ValidationMessage For="@(() => NewWarranty.StartDate)" />
    </div>

    <div class="form-group mb-3">
        <label for="endDate">End Date</label>
        <InputDate id="endDate" @bind-Value="NewWarranty.EndDate" class="form-control" />
        <ValidationMessage For="@(() => NewWarranty.EndDate)" />
    </div>

    <div class="form-group mb-3">
        <label for="coverageType">Coverage Details</label>
        <InputText id="coverageType" @bind-Value="NewWarranty.CoverageDetails" class="form-control" />
        <ValidationMessage For="@(() => NewWarranty.CoverageDetails)" />
    </div>

    <div class="form-group mb-3">
        <label for="cost">Cost</label>
        <InputNumber id="cost" @bind-Value="NewWarranty.Cost" class="form-control" />
        <ValidationMessage For="@(() => NewWarranty.Cost)" />
    </div>
</FormModal>

@code {
    [Parameter] public int Id { get; set; }

    private Car? Car { get; set; }
    private List<Warranty>? Warranties { get; set; }
    private Warranty NewWarranty { get; set; } = new();
    private List<WarrantyType>? WarrantyTypes { get; set; }
    private bool IsLoading { get; set; } = true;
    private string? ErrorMessage { get; set; }
    private readonly List<DataGridColumn<Warranty>> _warrantyColumns = DatagridColumnDefinitions.ReducedWarrantyColumns;
    private FormModal<Warranty>? formModal;
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            Car = await CarService.GetCarByIdAsync(Id);
            if (Car == null)
            {
                ErrorMessage = $"Car with ID {Id} not found.";
                return;
            }

            Warranties = await WarrantyService.GetWarrantiesForCarAsync(Id);
            WarrantyTypes = await WarrantyService.GetWarrantyTypesAsync();
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error loading car: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
        }
    }
    
    private void OpenCreateModal()
    {
        NewWarranty = new Warranty
        {
            CarId = Id,
            StartDate = DateTime.Today,
            EndDate = DateTime.Today.AddYears(3)
        };
        formModal?.Show();
    }
    
    private void CloseModal()
    {
        formModal?.Hide();
    }

    private async Task CreateWarranty(Warranty warranty)
    {
        try
        {
            await WarrantyService.CreateWarrantyAsync(warranty);
            Warranties = await WarrantyService.GetWarrantiesForCarAsync(Id);
            CloseModal();
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error creating warranty: {ex.Message}";
        }
    }

    private async Task UpdateCar()
    {
        try
        {
            if (Car == null) return;

            var updatedCar = await CarService.UpdateCarAsync(Car);

            if (updatedCar != null)
            {
                Navigation.NavigateTo("cars");
            }
            else
            {
                ErrorMessage = "Failed to update car. It may no longer exist.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error updating car: {ex.Message}";
        }
    }

    private void HandleRowClick(Warranty warranty)
    {
        Navigation.NavigateTo($"warranties/details/{warranty.Id}");
    }

    private void GoBack()
    {
        Navigation.NavigateTo("cars");
    }
    
    private async Task DeleteConfirm(int id)
    {
        try
        {
            var confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this warranty?");
            if (confirmed)
            {
                var success = await WarrantyService.DeleteWarrantyAsync(id);
                if (success)
                {
                    Warranties = await WarrantyService.GetWarrantiesForCarAsync(id);
                    ErrorMessage = null;
                }
                else
                {
                    ErrorMessage = "Failed to delete warranty. It may no longer exist.";
                }
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error deleting car: {ex.Message}";
        }
    }
}