@page "/cars"
@attribute [Authorize]
@using CarBlazor.Data
@using CarBlazor.Models
@using Microsoft.AspNetCore.Authorization
@using CarBlazor.Components.Search
@using CarBlazor.Services
@inject CarService CarService
@inject NavigationManager Navigation
@inject IJSRuntime JsRuntime
@rendermode InteractiveServer

<PageTitle>Cars</PageTitle>

<h1>Cars</h1>

<Search Placeholder="Search cars..." OnSearch="HandleSearch" />

<p>
    <a href="/cars/create" class="btn btn-primary">Create New</a>
</p>

<table class="table">
    <thead>
    <tr>
        <th>Make</th>
        <th>Model</th>
        <th>Year</th>
        <th>Color</th>
        <th>Production Date</th>
        <th></th>
    </tr>
    </thead>
    <tbody>
    @if (Cars != null)
    {
        @foreach (var car in Cars)
        {
            <tr @onclick="() => ViewDetails(car.Id)" class="clickable-row">
                <td>@car.Make</td>
                <td>@car.Model</td>
                <td>@car.Year</td>
                <td>@car.Color</td>
                <td>@car.ProductionDate?.ToShortDateString()</td>
                <td>
                    <button @onclick:stopPropagation="true" @onclick="() => DeleteConfirm(car.Id)"
                            class="btn btn-sm btn-link text-danger">
                        <i class="bi bi-trash fs-5"></i>
                    </button>
                </td>
            </tr>
        }
    }
    else
    {
        <tr>
            <td colspan="6">Loading...</td>
        </tr>
    }
    </tbody>
</table>

<style>
    .clickable-row {
        cursor: pointer;
    }

    .clickable-row:hover {
        background-color: #f5f5f5;
    }
</style>

@code {
    private List<Car>? Cars { get; set; }
    private string? ErrorMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Cars = await CarService.GetCarsAsync();
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error loading cars: {ex.Message}";
        }
    }

    private async Task HandleSearch(string searchTerm)
    {
        try
        {
            Cars = await CarService.SearchCarsAsync(searchTerm);
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error searching cars: {ex.Message}";
        }
    }

    private void ViewDetails(int id)
    {
        Navigation.NavigateTo($"cars/details/{id}");
    }

    private async Task DeleteConfirm(int id)
    {
        try
        {
            var confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this car?");

            if (confirmed)
            {
                var success = await CarService.DeleteCarAsync(id);
                if (success)
                {
                    Cars = await CarService.GetCarsAsync();
                    ErrorMessage = null;
                }
                else
                {
                    ErrorMessage = "Failed to delete car. It may no longer exist.";
                }
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error deleting car: {ex.Message}";
        }
    }
}