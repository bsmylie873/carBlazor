@page "/cars"
@attribute [Authorize]
@using CarBlazor.Components.Constants
@using Microsoft.AspNetCore.Authorization
@using CarBlazor.Components.Datagrid
@using CarBlazor.Components.Search
@using CarBlazor.DAL.Models
@using CarBlazor.Services.Services
@inject CarService CarService
@inject NavigationManager Navigation
@inject IJSRuntime JsRuntime
@rendermode InteractiveServer

<PageTitle>Cars</PageTitle>

<h1>Cars</h1>

<Search Placeholder="Search cars..." OnSearch="HandleSearch"/>

<p>
    <a href="/cars/create" class="btn btn-primary">Create New</a>
</p>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}
@if (IsLoading)
{
    <p>Loading...</p>
}
else if (Cars == null || Cars.Count == 0)
{
    <p>No cars found</p>
}
else
{
    <Datagrid TItem="Car" Items="Cars" Columns="_carColumns" OnRowClick="HandleRowClick">
        <RowActions Context="car">
            <DeleteButton OnClick="@(() => DeleteConfirm(car.Id))" />
        </RowActions>
    </Datagrid>
}

@code {
    private List<Car>? Cars;
    private bool IsLoading { get; set; } = true;
    private string? ErrorMessage;
    private readonly List<DataGridColumn<Car>> _carColumns = DatagridColumnDefinitions.CarColumns;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Cars = await CarService.GetCarsAsync();
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error loading cars: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
        }
    }

    private async Task HandleSearch(string searchTerm)
    {
        try
        {
            Cars = await CarService.SearchCarsAsync(searchTerm);
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error searching cars: {ex.Message}";
        }
    }

    private void HandleRowClick(Car car)
    {
        Navigation.NavigateTo($"cars/details/{car.Id}");
    }

    private async Task DeleteConfirm(int id)
    {
        try
        {
            var confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this car?");
            if (confirmed)
            {
                var success = await CarService.DeleteCarAsync(id);
                if (success)
                {
                    Cars = await CarService.GetCarsAsync();
                    ErrorMessage = null;
                }
                else
                {
                    ErrorMessage = "Failed to delete car. It may no longer exist.";
                }
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error deleting car: {ex.Message}";
        }
    }
}