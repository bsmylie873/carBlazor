@page "/cars"
@attribute [Authorize]
@using CarBlazor.Components.Constants
@using Microsoft.AspNetCore.Authorization
@using CarBlazor.Components.Datagrid
@using CarBlazor.Components.Search
@using CarBlazor.Components.FormModal
@using CarBlazor.DAL.Models
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JsRuntime
@rendermode InteractiveServer

<PageTitle>Cars</PageTitle>

<h1>Cars</h1>

<Search Placeholder="Search cars..." OnSearch="HandleSearch"/>

<p>
    <button class="btn btn-primary" @onclick="OpenCreateModal">Create New</button>
</p>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}
@if (IsLoading)
{
    <p>Loading...</p>
}
else if (Cars == null || Cars.Count == 0)
{
    <p>No cars found</p>
}
else
{
    <Datagrid TItem="Car" Items="Cars" Columns="_carColumns" OnRowClick="HandleRowClick">
        <RowActions Context="car">
            <DeleteButton OnClick="@(() => DeleteConfirm(car.Id))" />
        </RowActions>
    </Datagrid>
}

<FormModal TModel="Car"
           Model="NewCar"
           Title="Create Car"
           SaveButtonText="Create"
           OnSave="CreateCar"
           OnCancel="CloseModal"
           @ref="formModal">
</FormModal>

@code {
    private List<Car>? Cars;
    private Car NewCar { get; set; } = new() { ProductionDate = DateTime.SpecifyKind(DateTime.Today, DateTimeKind.Utc) };
    private bool IsLoading { get; set; } = true;
    private string? ErrorMessage;
    private readonly List<DataGridColumn<Car>> _carColumns = DatagridColumnDefinitions.CarColumns;
    private FormModal<Car>? formModal;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadCars();
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error loading cars: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
        }
    }

    private async Task LoadCars()
    {
        Cars = await Http.GetFromJsonAsync<List<Car>>("api/cars");
    }

    private void OpenCreateModal()
    {
        NewCar = new Car { ProductionDate = DateTime.SpecifyKind(DateTime.Today, DateTimeKind.Utc) };
        formModal?.Show();
    }

    private void CloseModal()
    {
        formModal?.Hide();
    }

    private async Task CreateCar(Car car)
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/cars", car);
            response.EnsureSuccessStatusCode();
            await LoadCars();
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error creating car: {ex.Message}";
        }
    }

    private async Task HandleSearch(string searchTerm)
    {
        try
        {
            Cars = await Http.GetFromJsonAsync<List<Car>>($"api/cars/search?searchTerm={Uri.EscapeDataString(searchTerm)}");
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error searching cars: {ex.Message}";
        }
    }

    private void HandleRowClick(Car car)
    {
        Navigation.NavigateTo($"cars/details/{car.Id}");
    }

    private async Task DeleteConfirm(int id)
    {
        try
        {
            var confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this car?");
            if (confirmed)
            {
                var response = await Http.DeleteAsync($"api/cars/{id}");
                if (response.IsSuccessStatusCode)
                {
                    await LoadCars();
                    ErrorMessage = null;
                }
                else
                {
                    ErrorMessage = "Failed to delete car. It may no longer exist.";
                }
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error deleting car: {ex.Message}";
        }
    }
}