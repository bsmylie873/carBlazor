@page "/cars"
@attribute [Authorize]
@using CarBlazor.Data
@using CarBlazor.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using CarBlazor.Components.Search
@inject CarBlazorContext Context
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>Cars</PageTitle>

<h1>Cars</h1>

<Search Placeholder="Search cars..." OnSearch="HandleSearch" />

<p>
    <a href="cars/create" class="btn btn-primary">Create New</a>
</p>

<table class="table">
    <thead>
    <tr>
        <th>Make</th>
        <th>Model</th>
        <th>Year</th>
        <th>Color</th>
        <th>Production Date</th>
        <th></th>
    </tr>
    </thead>
    <tbody>
    @if (Cars != null)
    {
        @foreach (var car in Cars)
        {
            <tr @onclick="() => ViewDetails(car.Id)" class="clickable-row">
                <td>@car.Make</td>
                <td>@car.Model</td>
                <td>@car.Year</td>
                <td>@car.Color</td>
                <td>@car.ProductionDate?.ToShortDateString()</td>
                <td>
                    <button @onclick:stopPropagation="true" @onclick="() => DeleteConfirm(car.Id)"
                            class="btn btn-sm btn-link text-danger">
                        <i class="bi bi-trash fs-5"></i>
                    </button>
                </td>
            </tr>
        }
    }
    else
    {
        <tr>
            <td colspan="6">Loading...</td>
        </tr>
    }
    </tbody>
</table>

<style>
    .clickable-row {
        cursor: pointer;
    }

    .clickable-row:hover {
        background-color: #f5f5f5;
    }
</style>

@code {
    private List<Car>? Cars { get; set; }
    private List<Car>? AllCars { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        AllCars = await Context.Car.ToListAsync();
        Cars = await Context.Car.ToListAsync();
    }
    
    private void HandleSearch(string searchTerm)
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            Cars = AllCars;
            return;
        }

        Cars = AllCars?
            .Where(c => 
                c is { Make: not null, Model: not null, Color: not null } 
                && (c.Make.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                    c.Model.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                    c.Color.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                    c.Year.ToString().Contains(searchTerm)))
            .ToList();
    }

    private void ViewDetails(int id)
    {
        Navigation.NavigateTo($"cars/details/{id}");
    }

    private async Task DeleteConfirm(int id)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this car?");

        if (confirmed)
        {
            var car = await Context.Car.FindAsync(id);
            if (car != null)
            {
                Context.Car.Remove(car);
                await Context.SaveChangesAsync();
                Cars = await Context.Car.ToListAsync();
            }
        }
    }
}