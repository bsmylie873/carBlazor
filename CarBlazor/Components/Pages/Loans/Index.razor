@page "/loans"
@attribute [Authorize(Roles = "Admin,Manager")]
@using CarBlazor.Components.Constants
@using Microsoft.AspNetCore.Authorization
@using CarBlazor.Components.Search
@using CarBlazor.Components.Datagrid
@using CarBlazor.Components.FormModal
@using CarBlazor.DAL.Models
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JsRuntime
@rendermode InteractiveServer

<PageTitle>Loans</PageTitle>

<h1>Loans</h1>

<Search Placeholder="Search loans..." OnSearch="HandleSearchAsync"/>

<p>
    <button class="btn btn-primary" @onclick="OpenCreateModal">Create New</button>
</p>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}
@if (IsLoading)
{
    <p>Loading...</p>
}
else if (Loans == null || Loans.Count == 0)
{
    <p>No loans found</p>
}
else
{
    <Datagrid TItem="Loan" Items="Loans" Columns="_loanColumns" OnRowClick="HandleRowClick">
        <RowActions Context="loan">
            <DeleteButton OnClick="@(() => DeleteConfirm(loan.Id))"/>
        </RowActions>
    </Datagrid>
}

<FormModal TModel="Loan"
           Model="NewLoan"
           Title="Create Loan"
           SaveButtonText="Create"
           OnSave="CreateLoan"
           OnCancel="CloseModal"
           @ref="formModal">
    <div class="form-group mb-3">
        <label for="carId">Car</label>
        <InputSelect id="carId" @bind-Value="NewLoan.CarId" class="form-control">
            <option value="">-- Select Car --</option>
            @if (Cars != null)
            {
                @foreach (var car in Cars)
                {
                    <option value="@car.Id">@($"{car.Make} {car.Model} ({car.Year})")</option>
                }
            }
        </InputSelect>
        <ValidationMessage For="@(() => NewLoan.CarId)"/>
    </div>

    <div class="form-group mb-3">
        <label for="amount">Amount</label>
        <InputNumber id="amount" @bind-Value="NewLoan.Amount" class="form-control"/>
        <ValidationMessage For="@(() => NewLoan.Amount)"/>
    </div>

    <div class="form-group mb-3">
        <label for="interestRate">Interest Rate</label>
        <InputNumber id="interestRate" @bind-Value="NewLoan.InterestRate" class="form-control"/>
        <small class="form-text text-muted">Enter as decimal (e.g., 0.05 for 5%)</small>
        <ValidationMessage For="@(() => NewLoan.InterestRate)"/>
    </div>

    <div class="form-group mb-3">
        <label for="startDate">Start Date</label>
        <InputDate id="startDate" @bind-Value="NewLoan.StartDate" class="form-control"/>
        <ValidationMessage For="@(() => NewLoan.StartDate)"/>
    </div>

    <div class="form-group mb-3">
        <label for="endDate">End Date</label>
        <InputDate id="endDate" @bind-Value="NewLoan.EndDate" class="form-control"/>
        <ValidationMessage For="@(() => NewLoan.EndDate)"/>
    </div>

    <div class="form-group mb-3">
        <label for="monthlyPayment">Monthly Payment</label>
        <InputNumber id="monthlyPayment" @bind-Value="NewLoan.MonthlyPayment" class="form-control"/>
        <ValidationMessage For="@(() => NewLoan.MonthlyPayment)"/>
    </div>

    <div class="form-group mb-3">
        <label for="remainingBalance">Remaining Balance</label>
        <InputNumber id="remainingBalance" @bind-Value="NewLoan.RemainingBalance" class="form-control"/>
        <ValidationMessage For="@(() => NewLoan.RemainingBalance)"/>
    </div>

    <div class="form-group mb-3">
        <label for="statusId">Loan Status</label>
        <InputSelect id="statusId" @bind-Value="NewLoan.StatusId" class="form-control">
            @if (LoanStatuses != null)
            {
                @foreach (var status in LoanStatuses)
                {
                    <option value="@status.Id">@status.Name</option>
                }
            }
        </InputSelect>
        <ValidationMessage For="@(() => NewLoan.StatusId)"/>
    </div>

    <div class="form-group mb-3">
        <label for="customerId">Customer</label>
        <InputSelect id="customerId" @bind-Value="NewLoan.CustomerId" class="form-control">
            <option value="">-- Select Customer --</option>
            @if (Customers != null)
            {
                @foreach (var customer in Customers)
                {
                    <option value="@customer.Id">@customer.FullName</option>
                }
            }
        </InputSelect>
        <ValidationMessage For="@(() => NewLoan.CustomerId)"/>
    </div>
</FormModal>

@code {
    private List<Loan>? Loans { get; set; }
    private List<Car>? Cars { get; set; }
    private List<Customer>? Customers { get; set; }
    private List<LoanStatus>? LoanStatuses { get; set; }
    private Loan NewLoan { get; set; } = new()
    {
        StartDate = DateTime.Today,
        EndDate = DateTime.Today.AddYears(5)
    };
    private bool IsLoading { get; set; } = true;
    private string? ErrorMessage { get; set; }
    private readonly List<DataGridColumn<Loan>> _loanColumns = DatagridColumnDefinitions.LoanColumns;
    private FormModal<Loan>? formModal;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Loans = await Http.GetFromJsonAsync<List<Loan>>("api/loans");
            Cars = await Http.GetFromJsonAsync<List<Car>>("api/cars");
            Customers = await Http.GetFromJsonAsync<List<Customer>>("api/customers");
            LoanStatuses = await Http.GetFromJsonAsync<List<LoanStatus>>("api/loans/statuses");
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error loading data: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
        }
    }

    private void OpenCreateModal()
    {
        NewLoan = new Loan
        {
            StartDate = DateTime.Today,
            EndDate = DateTime.Today.AddYears(5)
        };

        if (LoanStatuses?.Any() == true)
            NewLoan.StatusId = LoanStatuses.First().Id;

        formModal?.Show();
    }

    private void CloseModal()
    {
        formModal?.Hide();
    }

    private async Task CreateLoan(Loan loan)
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/loans", loan);
            
            if (response.IsSuccessStatusCode)
            {
                Loans = await Http.GetFromJsonAsync<List<Loan>>("api/loans");
                CloseModal();
            }
            else
            {
                ErrorMessage = "Failed to create loan.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error creating loan: {ex.Message}";
        }
    }

    private async Task HandleSearchAsync(string searchTerm)
    {
        try
        {
            Loans = await Http.GetFromJsonAsync<List<Loan>>($"api/loans/search?term={searchTerm}");
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error searching loans: {ex.Message}";
        }
    }

    private void HandleRowClick(Loan loan)
    {
        Navigation.NavigateTo($"loans/details/{loan.Id}");
    }

    private async Task DeleteConfirm(int id)
    {
        try
        {
            var confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this loan?");

            if (confirmed)
            {
                var response = await Http.DeleteAsync($"api/loans/{id}");
                
                if (response.IsSuccessStatusCode)
                {
                    Loans = await Http.GetFromJsonAsync<List<Loan>>("api/loans");
                    ErrorMessage = null;
                }
                else
                {
                    ErrorMessage = "Failed to delete loan. It may no longer exist.";
                }
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error deleting loan: {ex.Message}";
        }
    }
}