@page "/loans"
@attribute [Authorize(Roles = "Admin,Manager")]
@using CarBlazor.Components.Constants
@using Microsoft.AspNetCore.Authorization
@using CarBlazor.Components.Search
@using CarBlazor.Components.Datagrid
@using CarBlazor.DAL.Models
@using CarBlazor.Services.Services
@inject LoanService LoanService
@inject NavigationManager Navigation
@inject IJSRuntime JsRuntime
@rendermode InteractiveServer

<PageTitle>Loans</PageTitle>

<h1>Loans</h1>

<Search Placeholder="Search loans..." OnSearch="HandleSearchAsync" />

<p>
    <a href="/loans/create" class="btn btn-primary">Create New</a>
</p>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}
@if (IsLoading)
{
    <p>Loading...</p>
}
else if (Loans == null || Loans.Count == 0)
{
    <p>No loans found</p>
}
else
{
    <Datagrid TItem="Loan" Items="Loans" Columns="_loanColumns" OnRowClick="HandleRowClick">
        <RowActions Context="loan">
            <DeleteButton OnClick="@(() => DeleteConfirm(loan.Id))" />
        </RowActions>
    </Datagrid>
}

@code {
    private List<Loan>? Loans { get; set; }
    private bool IsLoading { get; set; } = true;
    private string? ErrorMessage { get; set; }
    private readonly List<DataGridColumn<Loan>> _loanColumns = DatagridColumnDefinitions.LoanColumns;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Loans = await LoanService.GetLoansAsync();
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error loading loans: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
        }
    }

    private async Task HandleSearchAsync(string searchTerm)
    {
        try
        {
            Loans = await LoanService.SearchLoansAsync(searchTerm);
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error searching loans: {ex.Message}";
        }
    }

    private void HandleRowClick(Loan loan)
    {
        Navigation.NavigateTo($"loans/details/{loan.Id}");
    }

    private async Task DeleteConfirm(int id)
    {
        try
        {
            var confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this loan?");

            if (confirmed)
            {
                var success = await LoanService.DeleteLoanAsync(id);
                if (success)
                {
                    Loans = await LoanService.GetLoansAsync();
                    ErrorMessage = null;
                }
                else
                {
                    ErrorMessage = "Failed to delete loan. It may no longer exist.";
                }
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error deleting loan: {ex.Message}";
        }
    }
}