@page "/loans/create"
@page "/loans/create/{CarId:int?}"
@attribute [Authorize]
@using CarBlazor.Data
@using CarBlazor.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@inject CarBlazorContext Context
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Create Loan</PageTitle>

<h1>Create</h1>

<h4>Loan</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm Model="@Loan" OnValidSubmit="CreateLoan">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group mb-3">
                <label for="carId">Car</label>
                <InputSelect id="carId" @bind-Value="Loan.CarId" class="form-control">
                    @if (Cars != null)
                    {
                        @foreach (var car in Cars)
                        {
                            <option value="@car.Id">@($"{car.Make} {car.Model} ({car.Year})")</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => Loan.CarId)" />
            </div>

            <div class="form-group mb-3">
                <label for="amount">Amount</label>
                <InputNumber id="amount" @bind-Value="Loan.Amount" class="form-control" />
                <ValidationMessage For="@(() => Loan.Amount)" />
            </div>

            <div class="form-group mb-3">
                <label for="interestRate">Interest Rate</label>
                <InputNumber id="interestRate" @bind-Value="Loan.InterestRate" class="form-control" />
                <small class="form-text text-muted">Enter as decimal (e.g., 0.05 for 5%)</small>
                <ValidationMessage For="@(() => Loan.InterestRate)" />
            </div>
            
            <div class="form-group mb-3">
                <label for="startDate">Start Date</label>
                <InputDate id="startDate" @bind-Value="Loan.StartDate" class="form-control" />
                <ValidationMessage For="@(() => Loan.StartDate)" />
            </div>

            <div class="form-group mb-3">
                <label for="endDate">End Date</label>
                <InputDate id="endDate" @bind-Value="Loan.EndDate" class="form-control" />
                <ValidationMessage For="@(() => Loan.EndDate)" />
            </div>

            <div class="form-group mb-3">
                <label for="monthlyPayment">Monthly Payment</label>
                <InputNumber id="monthlyPayment" @bind-Value="Loan.MonthlyPayment" class="form-control" />
                <ValidationMessage For="@(() => Loan.MonthlyPayment)" />
            </div>

            <div class="form-group mb-3">
                <label for="remainingBalance">Remaining Balance</label>
                <InputNumber id="remainingBalance" @bind-Value="Loan.RemainingBalance" class="form-control" />
                <ValidationMessage For="@(() => Loan.RemainingBalance)" />
            </div>

            <div class="form-group mb-3">
                <label for="loanStatusId">Loan Status</label>
                <InputSelect id="loanStatusId" @bind-Value="Loan.StatusId" class="form-control">
                    @if (LoanStatuses != null)
                    {
                        @foreach (var type in LoanStatuses)
                        {
                            <option value="@type.Id">@type.Name</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => Loan.Status)" />
            </div>

            <div class="form-group mb-3">
                <label for="customerId">Customer</label>
                <InputSelect id="customerId" @bind-Value="Loan.CustomerId" class="form-control">
                    <option value="">-- Select Customer --</option>
                    @if (Customers != null)
                    {
                        @foreach (var customer in Customers)
                        {
                            <option value="@customer.Id">@customer.FullName</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => Loan.CustomerId)" />
            </div>

            <div class="form-group mb-3">
                <button type="submit" class="btn btn-primary">Save</button>
                <button type="button" class="btn btn-secondary" @onclick="GoBack">Back to List</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [Parameter]
    public int? CarId { get; set; }

    private Loan Loan { get; set; } = new()
    {
        StartDate = DateTime.Today,
        EndDate = DateTime.Today.AddYears(5),
        StatusId = 1
    };

    private List<Car>? Cars { get; set; }
    private List<Customer>? Customers { get; set; }
    private List<LoanStatus>? LoanStatuses { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Cars = await Context.Car.ToListAsync();
        Customers = await Context.Customer.ToListAsync();
        LoanStatuses = await Context.LoanStatus.ToListAsync();
        
        var defaultStatus = LoanStatuses?.FirstOrDefault();
        if (defaultStatus != null)
        {
            Loan.StatusId = defaultStatus.Id;
        }

        if (CarId.HasValue)
        {
            Loan.CarId = CarId.Value;
        }
    }

    private async Task CreateLoan()
    {
        await Context.Loan.AddAsync(Loan);
        await Context.SaveChangesAsync();

        Navigation.NavigateTo(CarId.HasValue ? $"cars/details/{CarId.Value}" : "loans");
    }

    private void GoBack()
    {
        Navigation.NavigateTo(CarId.HasValue ? $"cars/details/{CarId.Value}" : "loans");
    }
}