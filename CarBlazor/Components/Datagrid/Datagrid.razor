@typeparam TItem

<table class="table">
    <thead>
    <tr>
        @foreach (var column in Columns)
        {
            <th>@column.Title</th>
        }
        @if (RowActions != null)
        {
            <th></th>
        }
    </tr>
    </thead>
    <tbody>
    @if (Items != null && Items.Any())
    {
        @foreach (var item in Items)
        {
            <tr @onclick="() => OnRowClick.InvokeAsync(item)" class="@(OnRowClick.HasDelegate ? "clickable-row" : "")">
                @foreach (var column in Columns)
                {
                    <td>@column.ValueGetter(item)</td>
                }
                @if (RowActions != null)
                {
                    <td @onclick:stopPropagation="true">
                        @RowActions(item)
                    </td>
                }
            </tr>
        }
    }
    else if (IsLoading)
    {
        <tr>
            <td colspan="@(RowActions != null ? Columns.Count + 1 : Columns.Count)">
                @LoadingTemplate
            </td>
        </tr>
    }
    else
    {
        <tr>
            <td colspan="@(RowActions != null ? Columns.Count + 1 : Columns.Count)">
                @EmptyTemplate
            </td>
        </tr>
    }
    </tbody>
</table>

<style>
    .clickable-row {
        cursor: pointer;
    }

    .clickable-row:hover {
        background-color: #f5f5f5;
    }
</style>

@code {
    [Parameter]
    public List<TItem>? Items { get; set; }
    
    [Parameter]
    public List<DataGridColumn<TItem>> Columns { get; set; } = new();
    
    [Parameter]
    public RenderFragment<TItem>? RowActions { get; set; }
    
    [Parameter]
    public EventCallback<TItem> OnRowClick { get; set; }
    
    [Parameter]
    public bool IsLoading { get; set; }
    
    [Parameter]
    public RenderFragment LoadingTemplate { get; set; } = @<span>Loading...</span>;
    
    [Parameter]
    public RenderFragment EmptyTemplate { get; set; } = @<span>No items found</span>;
}