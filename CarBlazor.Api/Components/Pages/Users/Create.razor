@page "/admin/users/create"
@attribute [Authorize(Roles = "Admin")]
@using System.ComponentModel.DataAnnotations
@using CarBlazor.DAL.Models
@using CarBlazor.Services.Services
@using CarBlazor.ViewModels
@using Microsoft.AspNetCore.Authorization
@inject RoleService RoleService
@inject UserService UserService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Create User</PageTitle>

<h1>Create User</h1>

<div class="row">
    <div class="col-md-6">
        <EditForm Model="@ViewModel" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator/>
            <ValidationSummary/>

            <div class="mb-3">
                <label for="username" class="form-label">Username</label>
                <InputText id="username" @bind-Value="ViewModel.Username" class="form-control"/>
                <ValidationMessage For="@(() => ViewModel.Username)"/>
            </div>

            <div class="mb-3">
                <label for="password" class="form-label">Password</label>
                <InputText id="password" @bind-Value="Password" type="password" class="form-control"/>
                <ValidationMessage For="@(() => Password)"/>
            </div>

            <div class="mb-3">
                <label for="confirmPassword" class="form-label">Confirm Password</label>
                <InputText id="confirmPassword" @bind-Value="ConfirmPassword" type="password" class="form-control"/>
                <ValidationMessage For="@(() => ConfirmPassword)"/>
            </div>

            <div class="mb-3">
                <label for="role" class="form-label">Role</label>
                <InputSelect id="role" @bind-Value="ViewModel.RoleId" class="form-select">
                    @if (Roles != null)
                    {
                        @foreach (var role in Roles)
                        {
                            <option value="@role.Id">@role.Name</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => ViewModel.RoleId)"/>
            </div>

            <div class="mb-3">
                <button type="submit" class="btn btn-primary">Create</button>
                <a href="/admin/users" class="btn btn-secondary">Cancel</a>
            </div>
        </EditForm>
    </div>
</div>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger mt-3">@ErrorMessage</div>
}

@code {
    private CreateUserViewModel ViewModel { get; set; } = new();
    private List<Role>? Roles { get; set; }

    [Required(ErrorMessage = "Password is required")]
    [StringLength(100, MinimumLength = 6, ErrorMessage = "Password must be at least 6 characters")]
    private string Password { get; set; } = string.Empty;

    [Required(ErrorMessage = "Confirm Password is required")]
    [Compare(nameof(Password), ErrorMessage = "Passwords do not match")]
    private string ConfirmPassword { get; set; } = string.Empty;

    private string? ErrorMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Roles = await RoleService.GetRolesAsync(includeAdmin: false);
            ViewModel.RoleId = "User";
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error loading roles: {ex.Message}";
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var usernameExists = await UserService.UsernameExistsAsync(ViewModel.Username);

            if (usernameExists)
            {
                ErrorMessage = "Username already exists.";
                return;
            }

            await UserService.CreateUserAsync(ViewModel.Username, Password, ViewModel.RoleId);
            Navigation.NavigateTo("/admin/users");
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error creating user: {ex.Message}";
        }
    }

}