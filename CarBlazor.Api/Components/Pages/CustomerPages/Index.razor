@page "/customers"
@attribute [Authorize(Roles = "Admin,Manager")]
@using CarBlazor.Components.Constants
@using CarBlazor.Components.Datagrid
@using Microsoft.AspNetCore.Authorization
@using CarBlazor.Components.Search
@using CarBlazor.DAL.Models
@using CarBlazor.Services.Services
@inject CustomerService CustomerService
@inject NavigationManager Navigation
@inject IJSRuntime JsRuntime
@rendermode InteractiveServer

<PageTitle>Customers</PageTitle>

<h1>Customers</h1>

<Search Placeholder="Search customers..." OnSearch="HandleSearch"/>

<p>
    <a href="/customers/create" class="btn btn-primary">Create New</a>
</p>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}
@if (IsLoading)
{
    <p>Loading...</p>
}
else if (Customers == null || Customers.Count == 0)
{
    <p>No customers found</p>
}
else
{
    <Datagrid TItem="Customer" Items="Customers" Columns="_customerColumns" OnRowClick="HandleRowClick">
        <RowActions Context="customer">
            <DeleteButton OnClick="@(() => DeleteConfirm(customer.Id))" />
        </RowActions>
    </Datagrid>
}

@code {
    private List<Customer>? Customers { get; set; }
    private bool IsLoading { get; set; } = true;
    private string? ErrorMessage { get; set; }  
    private readonly List<DataGridColumn<Customer>> _customerColumns = DatagridColumnDefinitions.CustomerColumns;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Customers = await CustomerService.GetCustomersAsync();
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error loading customers: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
        }
    }

    private async Task HandleSearch(string searchTerm)
    {
        try
        {
            IsLoading = true;
            Customers = await CustomerService.SearchCustomersAsync(searchTerm);
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error searching customers: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
        }
    }

    private void HandleRowClick(Customer customer)
    {
        Navigation.NavigateTo($"customers/details/{customer.Id}");
    }

    private async Task DeleteConfirm(int id)
    {
        try
        {
            var confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this customer?");

            if (confirmed)
            {
                var success = await CustomerService.DeleteCustomerAsync(id);
                if (success)
                {
                    Customers = await CustomerService.GetCustomersAsync();
                }
                else
                {
                    ErrorMessage = "Failed to delete customer. It may no longer exist.";
                }
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error deleting customer: {ex.Message}";

        }
    }
}